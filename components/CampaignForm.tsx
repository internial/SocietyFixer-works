import React, { useState, useEffect } from 'react';
import type { Campaign } from '../types';
import FileUpload from './FileUpload';
import { useToast } from '../hooks/useToast';
import { FormField } from './FormField';
import QuillEditor from './QuillEditor';

// Define the type for form data, excluding fields generated by the database
export type CampaignFormData = Omit<Campaign, 'id' | 'created_at' | 'user_id' | 'users'>;

interface CampaignFormProps {
    onSubmit: (data: CampaignFormData) => void;
    initialData?: Campaign | null;
    isSubmitting?: boolean;
    campaignId?: string;
}

const getFormPersistenceKey = (campaignId?: string) => 
    campaignId ? `campaign-form-draft-${campaignId}` : 'campaign-form-draft-new';

/**
 * A comprehensive form for creating or editing a campaign.
 * It now features automatic form persistence to localStorage, preventing data loss.
 *
 * @param {CampaignFormProps} props - The component props.
 * @returns {React.JSX.Element} The rendered campaign form.
 */
export default function CampaignForm({ onSubmit, initialData, isSubmitting = false, campaignId }: CampaignFormProps) {
    const { addToast } = useToast();
    const formPersistenceKey = getFormPersistenceKey(campaignId);

    const [formData, setFormData] = useState<CampaignFormData>(() => {
        const savedDraft = localStorage.getItem(formPersistenceKey);
        if (savedDraft) {
            try {
                // Use a timeout to ensure the toast appears after the initial render cycle.
                setTimeout(() => addToast({ message: "Draft restored.", type: "info" }), 100);
                return JSON.parse(savedDraft);
            } catch (e) {
                console.error("Failed to parse saved form data", e);
                localStorage.removeItem(formPersistenceKey); // Clear corrupted data
            }
        }
        return {
            candidate_name: initialData?.candidate_name || '',
            portrait_url: initialData?.portrait_url || '',
            election_deadline: initialData?.election_deadline || '',
            election_name: initialData?.election_name || '',
            scope: initialData?.scope || 'Local',
            election_region: initialData?.election_region || '',
            position_name: initialData?.position_name || '',
            proposed_policies: initialData?.proposed_policies || '',
            political_party: initialData?.political_party || '',
            gender: initialData?.gender || '',
            date_of_birth: initialData?.date_of_birth || '',
            religion: initialData?.religion || '',
            resume_url: initialData?.resume_url || '',
            contact_email: initialData?.contact_email || '',
            social_media_url: initialData?.social_media_url || '',
        };
    });
    
    const [errors, setErrors] = useState<Partial<Record<keyof CampaignFormData, string>>>({});

    // Effect to populate form with initialData from DB when it becomes available
    useEffect(() => {
        if (initialData) {
            setFormData({
                candidate_name: initialData.candidate_name,
                portrait_url: initialData.portrait_url,
                election_deadline: initialData.election_deadline,
                election_name: initialData.election_name,
                scope: initialData.scope,
                election_region: initialData.election_region,
                position_name: initialData.position_name,
                proposed_policies: initialData.proposed_policies,
                political_party: initialData.political_party,
                gender: initialData.gender,
                date_of_birth: initialData.date_of_birth,
                religion: initialData.religion,
                resume_url: initialData.resume_url,
                contact_email: initialData.contact_email,
                social_media_url: initialData.social_media_url,
            });
        }
    }, [initialData]);

    // Effect to save form data to localStorage whenever it changes
    useEffect(() => {
        try {
            localStorage.setItem(formPersistenceKey, JSON.stringify(formData));
        } catch (e) {
            console.error("Could not save form data to localStorage", e);
        }
    }, [formData, formPersistenceKey]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
        if (errors[name as keyof CampaignFormData]) {
            setErrors(prev => ({ ...prev, [name]: undefined }));
        }
    };

    const handlePoliciesChange = (value: string) => {
        setFormData(prev => ({ ...prev, proposed_policies: value }));
        if (errors.proposed_policies) {
            setErrors(prev => ({ ...prev, proposed_policies: undefined }));
        }
    };

    const handleFileUpload = (field: 'portrait_url' | 'resume_url') => (url: string) => {
        setFormData(prev => ({ ...prev, [field]: url }));
        if (errors[field]) {
            setErrors(prev => ({ ...prev, [field]: undefined }));
        }
    };

    const validateForm = (): boolean => {
        const newErrors: Partial<Record<keyof CampaignFormData, string>> = {};
        const requiredFields: (keyof CampaignFormData)[] = [
            'candidate_name', 'portrait_url', 'election_deadline', 'election_name',
            'scope', 'election_region', 'position_name', 'proposed_policies',
            'political_party', 'gender', 'date_of_birth', 'religion',
            'resume_url', 'contact_email', 'social_media_url'
        ];

        requiredFields.forEach(field => {
            if (field === 'proposed_policies') {
                const textContent = formData.proposed_policies.replace(/<[^>]*>?/gm, '').trim();
                if (!textContent) {
                    newErrors.proposed_policies = 'Proposed Policies is required.';
                }
            } else if (!formData[field]) {
                 const formattedFieldName = String(field).replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                 newErrors[field] = `${formattedFieldName} is required.`;
            }
        });

        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (validateForm()) {
            onSubmit(formData);
        }
    };
    
    const getRegionPlaceholder = (): string => {
        switch (formData.scope) {
            case 'Local':
                return 'e.g., Austin, TX';
            case 'State':
                return 'e.g., California';
            case 'National':
                return 'e.g., USA';
            default:
                return 'Enter the election region';
        }
    };

    return (
        <form onSubmit={handleSubmit} noValidate>
            <div className="row g-4">
                <FormField id="candidate_name" name="candidate_name" label="Candidate Name" value={formData.candidate_name} onChange={handleChange} error={errors.candidate_name} required />
                <FormField id="election_name" name="election_name" label="Election Name" value={formData.election_name} onChange={handleChange} error={errors.election_name} required />
                <FormField id="election_deadline" name="election_deadline" label="Election Deadline" type="date" value={formData.election_deadline} onChange={handleChange} error={errors.election_deadline} required />
                
                <fieldset className="col-md-6">
                     <legend className="form-label fs-6">Scope</legend>
                    <div className="d-flex pt-2">
                        {['Local', 'State', 'National'].map(scope => (
                            <div className="form-check me-3" key={scope}>
                                <input className="form-check-input" type="radio" name="scope" id={`scope${scope}`} value={scope} checked={formData.scope === scope} onChange={handleChange} required />
                                <label className="form-check-label" htmlFor={`scope${scope}`}>{scope}</label>
                            </div>
                        ))}
                    </div>
                </fieldset>

                <div className="col-md-6">
                    <label htmlFor="election_region" className="form-label">Election Region</label>
                    <div id="election_region-help" className="form-text mb-2">
                        The geographic area where an election is held. Only registered voters within this region are eligible to vote. Enter the city for local elections, the state for state elections, or the country for national elections.
                    </div>
                    <input 
                        type="text" 
                        id="election_region" 
                        name="election_region" 
                        value={formData.election_region} 
                        onChange={handleChange} 
                        className={`form-control ${errors.election_region ? 'is-invalid' : ''}`} 
                        placeholder={getRegionPlaceholder()} 
                        required 
                        aria-invalid={!!errors.election_region} 
                        aria-describedby="election_region-error election_region-help" 
                    />
                    {errors.election_region && <div id="election_region-error" className="invalid-feedback d-block">{errors.election_region}</div>}
                </div>
                
                <FormField id="position_name" name="position_name" label="Political Position Name" list="positions" value={formData.position_name} onChange={handleChange} error={errors.position_name} required>
                    <datalist id="positions">
                        <option value="President"/>
                        <option value="Vice President"/>
                        <option value="Senator"/>
                        <option value="House Representative"/>
                        <option value="Governor"/>
                        <option value="State Senator"/>
                        <option value="State Representative"/>
                        <option value="Mayor"/>
                        <option value="City Council Member"/>
                        <option value="School Board Member"/>
                    </datalist>
                </FormField>

                <FormField id="political_party" name="political_party" label="Political Party" list="parties" value={formData.political_party} onChange={handleChange} error={errors.political_party} required>
                    <datalist id="parties">
                        <option value="Democrat"/>
                        <option value="Republican"/>
                        <option value="Libertarian"/>
                        <option value="Green Party"/>
                        <option value="Independent"/>
                    </datalist>
                </FormField>
                
                <fieldset className="col-md-6">
                    <legend className="form-label fs-6">Gender</legend>
                    <div className="d-flex flex-wrap pt-2">
                        {['Male', 'Female', 'Non-binary'].map(option => (
                            <div className="form-check me-3" key={option}>
                                <input className="form-check-input" type="radio" name="gender" id={`gender${option.replace(/ /g, '')}`} value={option} checked={formData.gender === option} onChange={handleChange} required />
                                <label className="form-check-label" htmlFor={`gender${option.replace(/ /g, '')}`}>{option}</label>
                            </div>
                        ))}
                    </div>
                </fieldset>

                <FormField id="date_of_birth" name="date_of_birth" label="Date of Birth" type="date" value={formData.date_of_birth} onChange={handleChange} error={errors.date_of_birth} required />
                
                <FormField id="religion" name="religion" label="Religion" list="religions" value={formData.religion} onChange={handleChange} error={errors.religion} required>
                     <datalist id="religions">
                        <option value="Christianity"/>
                        <option value="Judaism"/>
                        <option value="Islam"/>
                        <option value="Hinduism"/>
                        <option value="Buddhism"/>
                        <option value="Agnostic"/>
                        <option value="Atheist"/>
                        <option value="None"/>
                    </datalist>
                </FormField>

                <FormField id="contact_email" name="contact_email" label="Contact Email" type="email" value={formData.contact_email} onChange={handleChange} error={errors.contact_email} helpText="This will be publicly visible on your campaign page." required />
                <FormField id="social_media_url" name="social_media_url" label="Social Media URL" type="url" value={formData.social_media_url} onChange={handleChange} error={errors.social_media_url} required />
            </div>
            
            <div className="mt-4">
                <p id="portrait-label" className="form-label">Portrait</p>
                <div className="p-3 mb-3 rounded-3 bg-info-subtle text-info-emphasis border border-info-subtle">
                    <p className="mb-0 text-sm">
                        JPEG/PNG only, max 2MB. Use an upper-body photo with a clearly visible face against a plain background. Business casual or professional attire is recommended. No hats or sunglasses.
                    </p>
                </div>
                <FileUpload onUpload={handleFileUpload('portrait_url')} fileType="image" storagePath="portraits" isRequired={!initialData?.portrait_url} ariaLabelledBy="portrait-label" />
                {formData.portrait_url && <img src={formData.portrait_url} alt="Portrait Preview" className="img-thumbnail mt-2" style={{ maxWidth: '150px' }} />}
                {errors.portrait_url && <div className="text-danger mt-1 text-sm">{errors.portrait_url}</div>}
            </div>

            <div className="mt-4">
                <p id="resume-label" className="form-label">Resume (PDF)</p>
                <FileUpload onUpload={handleFileUpload('resume_url')} fileType="pdf" storagePath="resumes" isRequired={!initialData?.resume_url} ariaLabelledBy="resume-label"/>
                {formData.resume_url && <a href={formData.resume_url} target="_blank" rel="noopener noreferrer" className="btn btn-outline-secondary mt-2">View Uploaded Resume</a>}
                {errors.resume_url && <div className="text-danger mt-1 text-sm">{errors.resume_url}</div>}
            </div>

            <div className="mt-4">
                <label id="proposed_policies-label" className="form-label">Proposed Policies</label>
                 <div className="p-3 mb-3 rounded-3" style={{ backgroundColor: 'var(--bs-body-bg)' }}>
                    <h6 className="fw-bold text-primary">Writing Effective Policies</h6>
                    <p className="text-sm text-secondary mb-2">
                        Well-written policies show voters you have a clear, actionable plan. Here are some tips. It must be detailed, logical, and practical.
                    </p>
                    <ol className="text-sm ps-4 mb-0" style={{ listStyleType: 'decimal' }}>
                        <li className="mb-2">
                            <strong>Use AI for Research</strong>
                            <p className="text-secondary my-1">Leverage tools like Google Gemini or ChatGPT to identify key problems in your region and brainstorm solutions.</p>
                            <small className="d-block p-2 rounded-2 text-info-emphasis" style={{ backgroundColor: 'var(--bs-tertiary-bg)' }}>
                                <em>Example Prompt: "What are the top 20 challenges faced by Austin, Texas, and what are the solutions to fix them?"</em>
                            </small>
                        </li>
                        <li className="mb-2">
                            <strong>Be Specific and Clear</strong>
                            <p className="text-secondary my-1">Use subheadings, bullet points, a numbered list, or a paragraph to structure your proposals, making them easy for voters to read and understand.</p>
                        </li>
                        <li className="mb-2">
                            <strong>Explain the problems and solutions in detail.</strong>
                        </li>
                        <li className="mb-2">
                            <strong>Use a Google Doc if you would like better text editor functions and want to continue to update the policies (Optional)</strong>
                            <p className="text-secondary my-1">Set the sharing permission to "Anyone with the link can view". Simply paste the public share link into the editor below.</p>
                        </li>
                    </ol>
                </div>
                <div className={errors.proposed_policies ? 'is-invalid' : ''}>
                    <QuillEditor
                        value={formData.proposed_policies}
                        onChange={handlePoliciesChange}
                        ariaLabelledBy="proposed_policies-label"
                    />
                </div>
                {errors.proposed_policies && <div className="invalid-feedback d-block">{errors.proposed_policies}</div>}
            </div>

            <div className="mt-5 text-center">
                <button type="submit" className="btn btn-primary" disabled={isSubmitting}>
                    {isSubmitting ? 'Submitting...' : (initialData ? 'Update Campaign' : 'Create Campaign')}
                </button>
            </div>
        </form>
    );
}